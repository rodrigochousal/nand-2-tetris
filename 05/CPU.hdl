// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
	DMux(in = true, sel = instruction[15], a = aInst, b = cInst);
		
	And(a = cInst, b = instruction[5], out = AorC);
	Mux16(a = instruction, b = outALU, sel = AorC, out = aInput);
	
	Or(a = aInst, b = AorC, out = loadA);
	ARegister(in = aInput, load = loadA, out = outA);
	
	Mux16(a = outA, b = inM, sel = instruction[12], out = outMorA);
	
	And(a = cInst, b = instruction[4], out = loadD);
	DRegister(in = outALU, load = loadD, out = outD);
	
	// route c-bits
	
	ALU(x = outD, y = outMorA, 
						zx = instruction[11], 
						nx = instruction[10], 
						zy = instruction[9], 
						ny = instruction[8], 
						f = instruction[7],
						no = instruction[6], 
						out = outALU, zr = zrOut, ng = ngOut);
	
	// route d-bits
	
	Or16(a = false, b = outA, out[0..14] = addressM);
    Or16(a = false, b = outALU, out = outM);
	And(a = instruction[15], b = instruction[3], out = writeM);
	
	// route j-bits
	
	Not(in = zrOut, out = notZr);
	Not(in = ngOut, out = notNg);
	And(a = notZr, b = notNg, out = pos);
	And(a = pos, b = instruction[0], out = jgt); // is positive and jump
	And(a = zrOut, b = instruction[1], out = jeq); // is zero and jump
	And(a = ngOut, b = instruction[2], out = jlt); // is negative and jump
	Or(a = jgt, b = jeq, out = jge); // greater than or equal to zero and jump
	Or(a = jeq, b = jlt, out = jle); // less than or equal to zero and jump
	
	Or(a = jge, b = jle, out = jumpA);
	
	And(a = instruction[15], b = jumpA, out = loadPC); // jump if c-instruction
	Not(in = loadPC, out = incPC); // if load, don't inc
	
	PC(in = outA, inc = incPC, load = loadPC, reset = reset, out[0..14] = pc);
}